name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  lint:
    name: Lint & Static Analysis
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: mbstring, intl, pdo_pgsql, redis
          coverage: xdebug
      - name: Get Composer cache directory
        id: composer-cache
        run: echo "dir=$(composer config cache-dir)" >> $GITHUB_OUTPUT
      - uses: actions/cache@v4
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-
      - name: Install dependencies
        run: |
          composer install --no-interaction --prefer-dist
      - name: Laravel Pint (PSR-12)
        run: |
          if [ -f vendor/bin/pint ]; then vendor/bin/pint --test -v; else echo "Pint not installed"; fi
      - name: PHPStan (Larastan)
        run: |
          if [ -f vendor/bin/phpstan ]; then vendor/bin/phpstan analyse --memory-limit=1G; else echo "PHPStan not installed"; fi

  test:
    name: Tests (Pest) + Coverage
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: app_test
          POSTGRES_USER: app
          POSTGRES_PASSWORD: secret
        ports: ['5432:5432']
        options: >-
          --health-cmd "pg_isready -U app" --health-interval 5s --health-timeout 5s --health-retries 10
      redis:
        image: redis:7-alpine
        ports: ['6379:6379']
        options: >-
          --health-cmd "redis-cli ping" --health-interval 5s --health-timeout 5s --health-retries 10
    steps:
      - uses: actions/checkout@v4
      - uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: mbstring, intl, pdo_pgsql, redis
          coverage: xdebug
      - name: Install dependencies
        run: composer install --no-interaction --prefer-dist
      - name: Prepare application
        run: |
          cp .env.example .env || true
          cp .env.secrets.example .env.secrets || true
          php artisan key:generate || true
      - name: Run migrations
        env:
          DB_CONNECTION: pgsql
          DB_DATABASE: app_test
          DB_HOST: 127.0.0.1
          DB_PORT: 5432
          DB_USERNAME: app
          DB_PASSWORD: secret
        run: |
          php artisan migrate --force || true
      - name: Run tests (Pest)
        run: |
          if [ -f vendor/bin/pest ]; then vendor/bin/pest --coverage --min=80 --colors=always; else echo "Pest not installed"; fi
      - name: Upload coverage
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage
          path: |
            coverage/

  build:
    name: Build Containers
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - uses: actions/checkout@v4
      - name: Build Docker images
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: fasthub/php:ci

  migrate:
    name: DB Migrations
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/checkout@v4
      - uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: mbstring, intl, pdo_pgsql, redis
      - name: Install dependencies
        run: composer install --no-interaction --prefer-dist
      - name: Run migrations
        env:
          DB_CONNECTION: pgsql
          DB_DATABASE: app
          DB_HOST: 127.0.0.1
          DB_PORT: 5432
          DB_USERNAME: app
          DB_PASSWORD: secret
        run: php artisan migrate --force || true
